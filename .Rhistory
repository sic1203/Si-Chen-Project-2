unique(ob$City.Neighborhood)
unique(income$Neighborhood)
all <- merge(ob, income, by.x=c("City.Neighborhood"),
by.y=c("Neighborhood")
)
all
head(all)
View(all)
runApp('GitHub/SC_Project2/ScGH_project2')
runApp('GitHub/SC_Project2/ScGH_project2')
runApp('GitHub/SC_Project2/ScGH_project2')
runApp('GitHub/SC_Project2/ScGH_project2')
runApp('GitHub/SC_Project2/ScGH_project2')
runApp('GitHub/SC_Project2/ScGH_project2')
parcel <-readOGR("http://openac-alcogis.opendata.arcgis.com/datasets/ebc3eb6a71dc4a60839b6eb80fa176aa_0.geojson")
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(rgdal)
library(leaflet)
library(shinythemes)
library(shinydashboard)
library(reshape2)
library(plotly)
library(tibble)
require(leaflet.extras)
require(readxl)
require(stringr)
require(RColorBrewer)
parcel <-readOGR("http://openac-alcogis.opendata.arcgis.com/datasets/ebc3eb6a71dc4a60839b6eb80fa176aa_0.geojson")
shiny::runApp('GitHub/Class_10-Leaflet-Shiny/Leaflet-Map')
library(shiny)
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(rgdal)
library(leaflet)
library(shinythemes)
library(shinydashboard)
library(reshape2)
library(plotly)
library(tibble)
require(leaflet.extras)
require(readxl)
require(stringr)
require(RColorBrewer)
income<- read.csv('C:/Users/csvan/Documents/GitHub/SC_Project2/ScGH_project2/ssi.csv',head=TRUE)
View(income)
runApp('GitHub/SC_Project2/ScGH_project2')
ui <- navbarPage("The relationship between obesity and income in Pitssburgh",
theme = shinytheme("cosmo"),
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
# Different neighborhood select
selectInput("NghSelect",
"Choose the Nehborhood:",
choices = sort(unique(income$Neighborhood)),
multiple = TRUE,
selectize = TRUE,
#Income Select
sliderInput("InSelect",
"Estimate Income withou SSI:",
min = min(income$Estimate..Total....No.Social.Security.income = T),
max = max(income$Estimate..Total....No.Social.Security.income, na.rm = T),
value = c("200", "6000"),
step = 1),
sliderInput("SssiSelect",
"Social Security Income:",
min=min(income$Estimate..Total....With.Social.Security.income,na.rm=T),
max=max(income$Estimate..Total....With.Social.Security.income,na.rm=T),
value=c("200","6000",
step=1),
actionButton("reset", "Reset Your Selection", icon = icon("refresh")
)
),
# Output plot
mainPanel(
plotlyOutput("plot1"),
plotlyOutput("plot2")
)
)
)
)
),
tabPanel("Table",
inputPanel(
downloadButton("downloadData","Download the Obesity and Income Data in Pittsburgh")
),
fluidPage(DT::dataTableOutput("table"))
)
)
server <- function(input, output, session = session) {
# total income filter
incomeInput <- reactive({
income.filter <- income %>%
filter(Estimate..Total....No.Social.Security.income >=input$InSelect[1] & Estimate..Total....No.Social.Security.income<= input$InSelect[2])
#selectinput neighborhood filter
if (length(input$NghSelect)> 1){
income.filter <- subset(income.filter, City.Neighborhood%in% input$NghSelect)
income.filter <- income %>%
filter(Estimate..Total....With.Social.Security.income>= input$SsiSelect[1] & Estimate..Total....With.Social.Security.income<= input$SssiSelect[2])
}
return(income.filter)
})
output$plot1 <- renderPlotly({
dat <- incomeInput()
ggplotly(
ggplot(data = dat, aes(x = Estimate..Total....No.Social.Security.income, fill=Estimate..Total....No.Social.Security.income))+
geom_point()
)
})
output$plot2 <- renderPlotly({
dat <- incomeInput()
ggplotly(
ggplot(data = dat, aes(x = Estimate..Total....With.Social.Security.income, fill = Estimate..Total....With.Social.Security.income))+
geom_boxplot()
)
})
# Data Table
output$table <- DT::renderDataTable({
incomedata.filter <- incomeInput()
subset(incomedata.filter, select = c(MUNICIPALITY,City.Neighborhood,X2006.2010.estimate.of.obesity)
)
})
# Updating the URL Bar
observe({
print(reactiveValuesToList(input))
session$doBookmark()
})
onBookmarked(function(url) {
updateQueryString(url)
})
# Download data in the datatable
output$downloadData <- downloadHandler(
filename = function() {
paste("obesity income", Sys.Date(), ".csv", sep="")
},
content = function(file) {
write.csv(obInput(), file)
}
)
}
shinyApp(ui = ui, server = server, enableBookmarking = "url")
ui <- navbarPage("The relationship between obesity and income in Pitssburgh",
theme = shinytheme("cosmo"),
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
# Different neighborhood select
selectInput("NghSelect",
"Choose the Nehborhood:",
choices = sort(unique(income$Neighborhood)),
multiple = TRUE,
selectize = TRUE,
#Income Select
sliderInput("InSelect",
"Estimate Income withou SSI:",
min = min(income$Estimate..Total....No.Social.Security.income = T),
max = max(income$Estimate..Total....No.Social.Security.income, na.rm = T),
value = c("200", "6000"),
step = 1),
sliderInput("SssiSelect",
"Social Security Income:",
min=min(income$Estimate..Total....With.Social.Security.income,na.rm=T),
max=max(income$Estimate..Total....With.Social.Security.income,na.rm=T),
value=c("200","6000",
step=1),
actionButton("reset", "Reset Your Selection", icon = icon("refresh")
)
),
# Output plot
mainPanel(
plotlyOutput("plot1"),
plotlyOutput("plot2")
)
)
)
)
),
tabPanel("Table",
inputPanel(
downloadButton("downloadData","Download the Obesity and Income Data in Pittsburgh")
),
fluidPage(DT::dataTableOutput("table"))
)
)
ui <- navbarPage("The relationship between obesity and income in Pitssburgh",
theme = shinytheme("cosmo"),
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
# Different neighborhood select
selectInput("NghSelect",
"Choose the Nehborhood:",
choices = sort(unique(income$Neighborhood)),
multiple = TRUE,
selectize = TRUE,
#Income Select
sliderInput("InSelect",
"Estimate Income withou SSI:",
min = min(income$Estimate..Total....No.Social.Security.income = T),
max = max(income$Estimate..Total....No.Social.Security.income, na.rm = T),
value = c("200", "6000"),
step = 1),
sliderInput("SssiSelect",
"Social Security Income:",
min=min(income$Estimate..Total....With.Social.Security.income,na.rm=T),
max=max(income$Estimate..Total....With.Social.Security.income,na.rm=T),
value=c("200","6000"),
step=1),
actionButton("reset", "Reset Your Selection", icon = icon("refresh"))
),
# Output plot
mainPanel(
plotlyOutput("plot1"),
plotlyOutput("plot2")
)
)
)),
tabPanel("Table",
inputPanel(
downloadButton("downloadData","Download the Obesity and Income Data in Pittsburgh")
),
fluidPage(DT::dataTableOutput("table"))
)
)
shiny::runApp('GitHub/SC_Project2/ScGH_project2')
shiny::runApp('GitHub/SC_Project2/ScGH_project2')
income<- read.csv('C:/Users/csvan/Documents/GitHub/SC_Project2/ScGH_project2/ssi.csv',head=TRUE)
ui <- navbarPage("The relationship between obesity and income in Pitssburgh",
theme = shinytheme("cosmo"),
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
# Different neighborhood select
selectInput("NghSelect",
"Choose the Nehborhood:",
choices = sort(unique(income$Neighborhood)),
multiple = TRUE,
selectize = TRUE,
#Income Select
sliderInput("InSelect",
"Estimate Income withou SSI:",
min = min(income$Estimate..Total....No.Social.Security.income = T),
max = max(income$Estimate..Total....No.Social.Security.income, na.rm = T),
value = c("200", "6000"),
step = 1),
sliderInput("SssiSelect",
"Social Security Income:",
min=min(income$Estimate..Total....With.Social.Security.income,na.rm=T),
max=max(income$Estimate..Total....With.Social.Security.income,na.rm=T),
value=c("200","6000"),
step=1),
actionButton("reset", "Reset Your Selection", icon = icon("refresh"))
),
# Output plot
mainPanel(
plotlyOutput("plot1"),
plotlyOutput("plot2")
)
)
)),
tabPanel("Table",
inputPanel(
downloadButton("downloadData","Download the Obesity and Income Data in Pittsburgh")
),
fluidPage(DT::dataTableOutput("table"))
)
)
server <- function(input, output, session = session) {
# total income filter
incomeInput <- reactive({
income.filter <- income %>%
filter(Estimate..Total....No.Social.Security.income >=input$InSelect[1] & Estimate..Total....No.Social.Security.income<= input$InSelect[2])
#selectinput neighborhood filter
if (length(input$NghSelect)> 1){
income.filter <- subset(income.filter, City.Neighborhood%in% input$NghSelect)
income.filter <- income %>%
filter(Estimate..Total....With.Social.Security.income>= input$SsiSelect[1] & Estimate..Total....With.Social.Security.income<= input$SssiSelect[2])
}
return(income.filter)
})
output$plot1 <- renderPlotly({
dat <- incomeInput()
ggplotly(
ggplot(data = dat, aes(x = Estimate..Total....No.Social.Security.income, fill=Estimate..Total....No.Social.Security.income))+
geom_point()
)
})
output$plot2 <- renderPlotly({
dat <- incomeInput()
ggplotly(
ggplot(data = dat, aes(x = Estimate..Total....With.Social.Security.income, fill = Estimate..Total....With.Social.Security.income))+
geom_boxplot()
)
})
# Data Table
output$table <- DT::renderDataTable({
incomedata.filter <- incomeInput()
subset(incomedata.filter, select = c(MUNICIPALITY,City.Neighborhood,X2006.2010.estimate.of.obesity)
)
})
# Updating the URL Bar
observe({
print(reactiveValuesToList(input))
session$doBookmark()
})
onBookmarked(function(url) {
updateQueryString(url)
})
# Download data in the datatable
output$downloadData <- downloadHandler(
filename = function() {
paste("obesity income", Sys.Date(), ".csv", sep="")
},
content = function(file) {
write.csv(obInput(), file)
}
)
}
shinyApp(ui = ui, server = server, enableBookmarking = "url")
ui <- navbarPage("The relationship between obesity and income in Pitssburgh",
theme = shinytheme("cosmo"),
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
# Different neighborhood select
selectInput("NghSelect",
"Choose the Nehborhood:",
choices = sort(unique(income$Neighborhood)),
multiple = TRUE,
selectize = TRUE,
#Income Select
sliderInput("InSelect",
"Estimate Income withou SSI:",
min = min(income$Estimate..Total....No.Social.Security.income = T),
max = max(income$Estimate..Total....No.Social.Security.income, na.rm = T),
value = c("200", "6000"),
step = 1),
sliderInput("SssiSelect",
"Social Security Income:",
min=min(income$Estimate..Total....With.Social.Security.income,na.rm=T),
max=max(income$Estimate..Total....With.Social.Security.income,na.rm=T),
value=c("200","6000"),
step=1),
actionButton("reset", "Reset Your Selection", icon = icon("refresh"))
),
# Output plot
mainPanel(
plotlyOutput("plot1"),
plotlyOutput("plot2")
)
)
)),
tabPanel("Table",
inputPanel(
downloadButton("downloadData","Download the Obesity and Income Data in Pittsburgh")
),
fluidPage(DT::dataTableOutput("table"))
)
)
runApp('GitHub/SC_Project2/ScGH_project2')
ui <- navbarPage("The relationship between obesity and income in Pitssburgh",
theme = shinytheme("cosmo"),
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
# Different neighborhood select
selectInput("NghSelect",
"Choose the Nehborhood:",
choices = sort(unique(income$Neighborhood)),
multiple = TRUE,
selectize = TRUE),
#Income Select
sliderInput("InSelect",
"Estimate Income withou SSI:",
min = min(income$Estimate..Total....No.Social.Security.income = T),
max = max(income$Estimate..Total....No.Social.Security.income, na.rm = T),
value = c("200", "6000"),
step = 1),
sliderInput("SssiSelect",
"Social Security Income:",
min=min(income$Estimate..Total....With.Social.Security.income,na.rm=T),
max=max(income$Estimate..Total....With.Social.Security.income,na.rm=T),
value=c("200","6000"),
step=1),
actionButton("reset", "Reset Your Selection", icon = icon("refresh"))
),
# Output plot
mainPanel(
plotlyOutput("plot1"),
plotlyOutput("plot2")
)
)
),
tabPanel("Table",
inputPanel(
downloadButton("downloadData","Download the Obesity and Income Data in Pittsburgh")
),
fluidPage(DT::dataTableOutput("table"))
)
)
ui <- navbarPage("The relationship between obesity and income in Pitssburgh",
theme = shinytheme("cosmo"),
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
# Different neighborhood select
selectInput("NghSelect",
"Choose the Nehborhood:",
choices = sort(unique(income$Neighborhood)),
multiple = TRUE,
selectize = TRUE),
#Income Select
sliderInput("InSelect",
"Estimate Income withou SSI:",
min = min(income$Estimate..Total....No.Social.Security.income = T),
max = max(income$Estimate..Total....No.Social.Security.income, na.rm = T),
value = c("200", "6000"),
step = 1),
sliderInput("SssiSelect",
"Social Security Income:",
min=min(income$Estimate..Total....With.Social.Security.income,na.rm=T),
max=max(income$Estimate..Total....With.Social.Security.income,na.rm=T),
value=c("200","6000"),
step=1),
actionButton("reset", "Reset Your Selection", icon = icon("refresh"))
),
# Output plot
mainPanel(
plotlyOutput("plot1"),
plotlyOutput("plot2")
)
)
),
tabPanel("Table",
inputPanel(
downloadButton("downloadData","Download the Obesity and Income Data in Pittsburgh")),
fluidPage(DT::dataTableOutput("table"))
)
)
library(shiny); runApp('GitHub/SC_Project2/ScGH_project2/mapjeojson.R')
runApp('GitHub/SC_Project2/ScGH_project2/mapjeojson.R')
Ball.load <-readOGR('https://opendata.arcgis.com/datasets/87f3b2bdfa6646319a56e86521480efd_0.geojson')
library(shiny)
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(rgdal)
library(leaflet)
library(shinythemes)
library(shinydashboard)
library(reshape2)
library(plotly)
library(tibble)
require(leaflet.extras)
require(readxl)
require(stringr)
require(RColorBrewer)
library(rgeos)
require(rgdal)
require(leaflet)
require(leaflet.extras)
require(dplyr)
require(readxl)
require(stringr)
require(RColorBrewer)
Ball.load <-readOGR('https://opendata.arcgis.com/datasets/87f3b2bdfa6646319a56e86521480efd_0.geojson')
plot(Ball.load)
runApp('GitHub/Class_11-API-DBs/API')
Ngbh.load <-readOGR('https://opendata.arcgis.com/datasets/dbd133a206cc4a3aa915cb28baa60fd4_0.geojson')
greenInf.load <- readOGR("https://data.cityofnewyork.us/api/geospatial/spjh-pz7h?method=export&format=GeoJSON")
print(Ball.load)
runApp('GitHub/SC_Project2/ScGH_project2/addpoints.R')
school<- readOGR('http://openac-alcogis.opendata.arcgis.com/datasets/9de0e9c07af04e638dbc9cb9070962c2_0.geojson')
print(school$SCHOOLD)
print(Ngbh.load$hood)
print(school$LABEL)
print(Ngbh.load)
runApp('GitHub/SC_Project2/ScGH_project2/addpoints.R')
runApp('GitHub/SC_Project2/ScGH_project2/addpoints.R')
runApp('GitHub/SC_Project2/ScGH_project2/addpoints.R')
runApp('GitHub/SC_Project2/ScGH_project2/addpoints.R')
runApp('GitHub/SC_Project2/ScGH_project2/addpoints.R')
runApp('GitHub/SC_Project2/ScGH_project2/addpoints.R')
runApp('GitHub/SC_Project2/ScGH_project2/addpoints.R')
library(shiny); runApp('addpoints.R')
runApp('addpoints.R')
runApp('addpoints.R')
runApp('addpoints.R')
runApp('addpoints.R')
print(Ball.load$active)
runApp('addpoints.R')
runApp('addpoints.R')
runApp('dataset  mapfinal.R')
runApp('dataset  mapfinal.R')
runApp('dataset  mapfinal.R')
runApp('dataset  mapfinal.R')
runApp('dataset  mapfinal.R')
runApp('dataset  mapfinal.R')
runApp('dataset  mapfinal.R')
runApp('dataset  mapfinal.R')
runApp('dataset  mapfinal.R')
runApp('dataset  mapfinal.R')
library(shiny); runApp('ProjectMiddleVersion.R')
runApp('ProjectMiddleVersion.R')
library(shiny); runApp('ProjectMiddleVersion.R')
runApp('ProjectMiddleVersion.R')
