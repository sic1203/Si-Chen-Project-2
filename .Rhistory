tabPanel("Plot",
sidebarLayout(
sidebarPanel(
# Different neighborhood select
selectInput("NghSelect",
"Choose the Nehborhood:",
choices = sort(unique(income$Neighborhood)),
multiple = TRUE,
selectize = TRUE,
#Income Select
sliderInput("InSelect",
"Estimate Income withou SSI:",
min = min(income$Estimate..Total....No.Social.Security.income = T),
max = max(income$Estimate..Total....No.Social.Security.income, na.rm = T),
value = c("200", "6000"),
step = 1),
sliderInput("SssiSelect",
"Social Security Income:",
min=min(income$Estimate..Total....With.Social.Security.income,na.rm=T),
max=max(income$Estimate..Total....With.Social.Security.income,na.rm=T),
value=c("200","6000"),
step=1),
actionButton("reset", "Reset Your Selection", icon = icon("refresh"))
),
# Output plot
mainPanel(
plotlyOutput("plot1"),
plotlyOutput("plot2")
)
)
)),
tabPanel("Table",
inputPanel(
downloadButton("downloadData","Download the Obesity and Income Data in Pittsburgh")
),
fluidPage(DT::dataTableOutput("table"))
)
)
runApp('GitHub/SC_Project2/ScGH_project2')
ui <- navbarPage("The relationship between obesity and income in Pitssburgh",
theme = shinytheme("cosmo"),
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
# Different neighborhood select
selectInput("NghSelect",
"Choose the Nehborhood:",
choices = sort(unique(income$Neighborhood)),
multiple = TRUE,
selectize = TRUE),
#Income Select
sliderInput("InSelect",
"Estimate Income withou SSI:",
min = min(income$Estimate..Total....No.Social.Security.income = T),
max = max(income$Estimate..Total....No.Social.Security.income, na.rm = T),
value = c("200", "6000"),
step = 1),
sliderInput("SssiSelect",
"Social Security Income:",
min=min(income$Estimate..Total....With.Social.Security.income,na.rm=T),
max=max(income$Estimate..Total....With.Social.Security.income,na.rm=T),
value=c("200","6000"),
step=1),
actionButton("reset", "Reset Your Selection", icon = icon("refresh"))
),
# Output plot
mainPanel(
plotlyOutput("plot1"),
plotlyOutput("plot2")
)
)
),
tabPanel("Table",
inputPanel(
downloadButton("downloadData","Download the Obesity and Income Data in Pittsburgh")
),
fluidPage(DT::dataTableOutput("table"))
)
)
ui <- navbarPage("The relationship between obesity and income in Pitssburgh",
theme = shinytheme("cosmo"),
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
# Different neighborhood select
selectInput("NghSelect",
"Choose the Nehborhood:",
choices = sort(unique(income$Neighborhood)),
multiple = TRUE,
selectize = TRUE),
#Income Select
sliderInput("InSelect",
"Estimate Income withou SSI:",
min = min(income$Estimate..Total....No.Social.Security.income = T),
max = max(income$Estimate..Total....No.Social.Security.income, na.rm = T),
value = c("200", "6000"),
step = 1),
sliderInput("SssiSelect",
"Social Security Income:",
min=min(income$Estimate..Total....With.Social.Security.income,na.rm=T),
max=max(income$Estimate..Total....With.Social.Security.income,na.rm=T),
value=c("200","6000"),
step=1),
actionButton("reset", "Reset Your Selection", icon = icon("refresh"))
),
# Output plot
mainPanel(
plotlyOutput("plot1"),
plotlyOutput("plot2")
)
)
),
tabPanel("Table",
inputPanel(
downloadButton("downloadData","Download the Obesity and Income Data in Pittsburgh")),
fluidPage(DT::dataTableOutput("table"))
)
)
shiny::runApp('GitHub/SC_Project2/ScGH_project2')
runApp('GitHub/SC_Project2/ScGH_project2')
runApp('GitHub/SC_Project2/ScGH_project2')
runApp('GitHub/SC_Project2/ScGH_project2')
runApp('GitHub/SC_Project2/ScGH_project2')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
mwInput <- reactive({
icInput() %>%
melt(id = "Neughborhood")
})
mwInput
icInput() %>%
select(Estimate..Total....No.Social.Security.income,Estimate..Total....With.Social.Security.income)
melt(id = "Neughborhood")
income %>%
select(Estimate..Total....No.Social.Security.income,Estimate..Total....With.Social.Security.income)
melt(id = "Neughborhood")
income<-read.csv("income.csv")
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
income<- read.csv('C:/Users/csvan/Documents/GitHub/SC_Project2/ScGH_project2/ssi.csv',head=TRUE)
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
income<- read.csv('C:/Users/csvan/Documents/GitHub/SC_Project2/ScGH_project2/ssi.csv',head=TRUE)
library(plotly)
plot_ly(income,x=~Estimate..Total....No.Social.Security.income,name="No SSI",type="histogram")
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
plot_ly(dat,x=~Estimate..Total....No.Social.Security.income,name="No SSI",type="histogram")%>%
add_trace(x =~Estimate..Total....No.Social.Security.income , mode = "lines", fill = "tozeroy", yaxis = "y2", name = "Density") %>%
layout(yaxis2 = list(overlaying = "y", side = "right"))
plot_ly(income,x=~Estimate..Total....No.Social.Security.income,name="No SSI",type="histogram")%>%
add_trace(x =~Estimate..Total....No.Social.Security.income , mode = "lines", fill = "tozeroy", yaxis = "y2", name = "Density") %>%
layout(yaxis2 = list(overlaying = "y", side = "right"))
plot_ly(income,x=~Estimate..Total....No.Social.Security.income,name="No SSI",type="histogram")%>%
add_trace(x =~Estimate..Total....No.Social.Security.income , mode = "line", fill = "tozeroy", yaxis = "y2", name = "Density") %>%
layout(yaxis2 = list(overlaying = "y", side = "right"))
plot_ly(income,x=~Estimate..Total....No.Social.Security.income,name="No SSI",type="histogram")%>%
add_trace(x =~Estimate..Total....No.Social.Security.income , mode = "lines", fill = "tozeroy", yaxis = "y2", name = "Density") %>%
layout(yaxis2 = list(overlaying = "y", side = "right"))
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
icInput <- reactive({
income.filter <- income %>%
# Slider income without social security Filter
filter(Estimate..Total....No.Social.Security.income >= input$InSelect[1] & Estimate..Total....No.Social.Security.income <= input$InSelect[2])
ssi.filter <-income %>%
filter(Estimate..Total. >= input$SsiSelect[1] & Estimate..Total. <= input$SsiSelect[2])
#selectinput neighborhood filter
if (length(input$NghSelect) > 0 ) {
income.filter <- subset(income.filter, Neighborhood%in% input$NghSelect)
}
# #slider income with social security filter
# income.filter <- income %>%
#   # Slider income without social security Filter
#   filter(Estimate..Total. >= input$SsiSelect[1] & Estimate..Total. <= input$SsiSelect[2])
return(list(income.filter,ssi.filter))
})
icInput()
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
ssi.filter <-income %>%
filter(Estimate..Total. >= input$SsiSelect[1] & Estimate..Total. <= input$SsiSelect[2])
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
list(income[1,],income[2,])
runApp('GitHub/SC_Project2/ScGH_project2/noresponse.R')
library(shiny); runApp('noresponse.R')
runApp('noresponse.R')
runApp('noresponse.R')
runApp('noresponse.R')
runApp('noresponse.R')
runApp('noresponse.R')
runApp('dataset final.R')
runApp('dataset final.R')
runApp('dataset final.R')
runApp('dataset final.R')
runApp('dataset final.R')
runApp('dataset final.R')
runApp('dataset final.R')
runApp('dataset final.R')
runApp('dataset final.R')
runApp('dataset final.R')
runApp('~/GitHub/Class_10-Leaflet-Shiny/Leaflet-Proxy')
runApp('dataset final.R')
pit <-readOGR('c:/Users/csvan/Documents/GitHub/SC_Project2/ScGH_project2/obesityrates/obesity_rates.shp')
pit <-readOGR('c:/Users/csvan/Documents/GitHub/SC_Project2/ScGH_project2/obesityrates/obesity_rates.shp')
pit <-readOGR('c:/Users/csvan/Documents/GitHub/SC_Project2/ScGH_project2/obesityrates/obesity_rates.shp')
palpolygon <- colorNumeric(
palette = "RdYlBu",
domain= pit$City_Neigh)
library(shiny)
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(rgdal)
library(leaflet)
library(shinythemes)
library(shinydashboard)
library(reshape2)
library(plotly)
library(tibble)
require(leaflet.extras)
require(readxl)
require(stringr)
require(RColorBrewer)
pit <-readOGR('c:/Users/csvan/Documents/GitHub/SC_Project2/ScGH_project2/obesityrates/obesity_rates.shp')
palpolygon <- colorNumeric(
palette = "RdYlBu",
domain= pit$City_Neigh)
library(shiny)
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(rgdal)
library(leaflet)
library(shinythemes)
library(shinydashboard)
library(reshape2)
library(plotly)
library(tibble)
require(leaflet.extras)
require(readxl)
require(stringr)
require(RColorBrewer)
pit <-readOGR('c:/Users/csvan/Documents/GitHub/SC_Project2/ScGH_project2/obesityrates/obesity_rates.shp')
PitMap <- leaflet() %>%
addProviderTiles("OpenStreetMap.BlackAndWhite", group =" Street",options = providerTileOptions(noWrap = TRUE)) %>%
addProviderTiles("Stamen.Toner", group="Toner",options = providerTileOptions(noWrap = TRUE)) %>%
setView(-80,40.5,zoom=10) %>%
#add three layers
addPolygons(data = pit, color = ~palpolygon(City_Neigh),group="pit") %>%
#add legend for polgon layer
addLegend("bottomright", pal = palpolygon, values = pit$City_Neigh,
title = "City Neighborhood",
opacity = 1
) %>%
#add layers control
addLayersControl(
baseGroups = c("Street", "Toner"),
overlayGroups = c("pit"),
options = layersControlOptions(collapsed = FALSE))
pit <-readOGR('http://pghgis-pittsburghpa.opendata.arcgis.com/datasets/dbd133a206cc4a3aa915cb28baa60fd4_0.geojson')
library(shiny)
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(rgdal)
library(leaflet)
library(shinythemes)
library(shinydashboard)
library(reshape2)
library(plotly)
library(tibble)
require(leaflet.extras)
require(readxl)
require(stringr)
require(RColorBrewer)
pit <-readOGR('http://pghgis-pittsburghpa.opendata.arcgis.com/datasets/dbd133a206cc4a3aa915cb28baa60fd4_0.geojson')
palpolygon <- colorNumeric(
palette = "RdYlBu",
domain= pit$neighbor_
PitMap <- leaflet() %>%
library(shiny)
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(rgdal)
library(leaflet)
library(shinythemes)
library(shinydashboard)
library(reshape2)
library(plotly)
library(tibble)
require(leaflet.extras)
require(readxl)
require(stringr)
require(RColorBrewer)
pit <-readOGR('http://pghgis-pittsburghpa.opendata.arcgis.com/datasets/dbd133a206cc4a3aa915cb28baa60fd4_0.geojson')
palpolygon <- colorNumeric(
palette = "RdYlBu",
domain= pit$neighbor_)
PitMap <- leaflet() %>%
addProviderTiles("OpenStreetMap.BlackAndWhite", group =" Street",options = providerTileOptions(noWrap = TRUE)) %>%
addProviderTiles("Stamen.Toner", group="Toner",options = providerTileOptions(noWrap = TRUE)) %>%
setView(-80,40.5,zoom=10) %>%
#add three layers
addPolygons(data = pit, color = ~palpolygon(neighbor_),group="pit") %>%
#add legend for polgon layer
addLegend("bottomright", pal = palpolygon, values = pit$neighbor_,
title = "City Neighborhood",
opacity = 1
) %>%
#add layers control
addLayersControl(
baseGroups = c("Street", "Toner"),
overlayGroups = c("pit"),
options = layersControlOptions(collapsed = FALSE))
#show map
PitMap
library(shiny)
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(rgdal)
library(leaflet)
library(shinythemes)
library(shinydashboard)
library(reshape2)
library(plotly)
library(tibble)
require(leaflet.extras)
require(readxl)
require(stringr)
require(RColorBrewer)
pit <-readOGR('http://pghgis-pittsburghpa.opendata.arcgis.com/datasets/dbd133a206cc4a3aa915cb28baa60fd4_0.geojson')
palpolygon <- colorNumeric(
palette = "RdYlBu")
library(shiny)
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(rgdal)
library(leaflet)
library(shinythemes)
library(shinydashboard)
library(reshape2)
library(plotly)
library(tibble)
require(leaflet.extras)
require(readxl)
require(stringr)
require(RColorBrewer)
pit <-readOGR("https://data.cityofnewyork.us/api/geospatial/spjh-pz7h?method=export&format=GeoJSON")
palpolygon <- colorNumeric(
palette = "RdYlBu",
domain= pit$neighbor_)
PitMap <- leaflet() %>%
addProviderTiles("OpenStreetMap.BlackAndWhite", group =" Street",options = providerTileOptions(noWrap = TRUE)) %>%
addProviderTiles("Stamen.Toner", group="Toner",options = providerTileOptions(noWrap = TRUE)) %>%
setView(-80,40.5,zoom=10) %>%
#add three layers
addPolygons(data = pit, color = ~palpolygon(neighbor_),group="pit") %>%
#add legend for polgon layer
addLegend("bottomright", pal = palpolygon, values = pit$neighbor_,
title = "City Neighborhood",
opacity = 1
) %>%
#add layers control
addLayersControl(
baseGroups = c("Street", "Toner"),
overlayGroups = c("pit"),
options = layersControlOptions(collapsed = FALSE))
runApp('trymap.R')
runApp('trymap.R')
runApp('trymap.R')
library(shiny); runApp('trymap.R')
runApp('trymap.R')
runApp('trymap.R')
runApp('trymap.R')
library(shiny); runApp('trymap.R')
greenInf.load <- readOGR("https://data.cityofnewyork.us/api/geospatial/spjh-pz7h?method=export&format=GeoJSON")
greenInf.load$
boros.load <- readOGR("https://data.cityofnewyork.us/api/geospatial/tqmj-j8zm?method=export&format=GeoJSON")
greenInf.load$
boros.load <- readOGR("https://data.cityofnewyork.us/api/geospatial/tqmj-j8zm?method=export&format=GeoJSON")
boros.load@data <- cbind(boros.load@data, rgeos::gCentroid(boros.load, byid = TRUE)@coords)
Ngbh <-readOGR('http://pghgis-pittsburghpa.opendata.arcgis.com/datasets/dbd133a206cc4a3aa915cb28baa60fd4_0.geojson')
Ngbh.load <-readOGR('http://pghgis-pittsburghpa.opendata.arcgis.com/datasets/dbd133a206cc4a3aa915cb28baa60fd4_0.geojson')
runApp('mapjeojson.R')
runApp('mapjeojson.R')
Ngbh.load <-readOGR('https://opendata.arcgis.com/datasets/dbd133a206cc4a3aa915cb28baa60fd4_0.geojson')
runApp('mapjeojson.R')
Ngbh.load <-readOGR('https://opendata.arcgis.com/datasets/dbd133a206cc4a3aa915cb28baa60fd4_0.geojson')
Ngbh.load <-readOGR('https://opendata.arcgis.com/datasets/dbd133a206cc4a3aa915cb28baa60fd4_0.geojson')
library(shiny)
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(rgdal)
library(leaflet)
library(shinythemes)
library(shinydashboard)
library(reshape2)
library(plotly)
library(tibble)
require(leaflet.extras)
require(readxl)
require(stringr)
require(RColorBrewer)
library(rgeos)
Ngbh.load <-readOGR('https://opendata.arcgis.com/datasets/dbd133a206cc4a3aa915cb28baa60fd4_0.geojson')
palpolygon <- colorNumeric(
palette = "RdYlBu",
domain= Ngbh.load$hood)
palpolygon <- colorNumeric(
palette = "RdYlBu",
domain= Ngbh.load$hood_no)
runApp('mapjeojson.R')
runApp('mapjeojson.R')
library(shiny); runApp('mapjeojson.R')
library(shiny); runApp('mapjeojson.R')
library(shiny); runApp('mapjeojson.R')
library(shiny); runApp('mapjeojson.R')
runApp('trymap.R')
runApp('trymap.R')
runApp('trymap.R')
library(shiny); runApp('dataset final.R')
library(shiny); runApp('insertApi.R')
library(shiny); runApp('insertApi.R')
library(shiny); runApp('insertApi.R')
library(shiny); runApp('insertApi.R')
library(shiny); runApp('insertApi.R')
library(shiny)
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(rgdal)
library(leaflet)
library(shinythemes)
library(shinydashboard)
library(reshape2)
library(plotly)
library(tibble)
require(leaflet.extras)
require(readxl)
require(stringr)
require(RColorBrewer)
ckanSQL <- function(url) {
# Make the Request
r <- RETRY("GET", URLencode(url))
# Extract Content
c <- content(r, "text")
# Basic gsub to make NA's consistent with R
json <- gsub('NaN', 'NA', c, perl = TRUE)
# Create Dataframe
data.frame(jsonlite::fromJSON(json)$result$records)
}
ckanUniques <- function(id, field) {
url <- paste0("https://data.wprdc.org/api/3/action/datastore_search_sql?sql=SELECT%20DISTINCT(%22", field, "%22)%20from%20%22", id, "%22")
c(ckanSQL(URLencode(url)))
}
Ngh <- sort(ckanUniques("7f438bd0-71c7-4997-a5b8-f12894599215", "Neighborhood")$Neighborhood)
Total <- sort(ckanUniques("7f438bd0-71c7-4997-a5b8-f12894599215","Estimate..Total....No.Social.Security.income")$Estimate..Total....No.Social.Security.income)
Ssi<- sort(ckanUniques("7f438bd0-71c7-4997-a5b8-f12894599215","Estimate..Total.")$Estimate..Total.)
Ssi<- sort(ckanUniques("7f438bd0-71c7-4997-a5b8-f12894599215","Estimate; Total:")$Estimate; Total:)
dd<- sort(ckanUniques("7f438bd0-71c7-4997-a5b8-f12894599215", "id")$id)
dd<- sort(ckanUniques("7f438bd0-71c7-4997-a5b8-f12894599215", "Id")$Id)
runApp('mapjeojson.R')
runApp('mapjeojson.R')
library(shiny); runApp('mapjeojson.R')
runApp('mapjeojson.R')
runApp('mapjeojson.R')
runApp('mapjeojson.R')
runApp('mapjeojson.R')
runApp('mapjeojson.R')
